h help:  ## Show help
	@grep -E '^[.a-zA-Z_ -]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

c clean: ## Clean autogenerated files
	rm -rf dist
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	rm -f .coverage

cl clean-logs: ## Clean logs
	rm -rf logs/**

f format: ## Run pre-commit hooks
	pre-commit run -a

s sync: ## Merge changes from main branch to your current branch
	git pull
	git pull origin main

a activate: ## Activate the uv environment
	@echo "Add to ~/.tcshrc: alias a 'echo \"source .venv/bin/activate.csh\" && source .venv/bin/activate.csh'"
	@echo "Then just type: a"

d deactivate: ## Deactivate the uv environment
	@echo "Add to ~/.tcshrc: alias d 'echo deactivate && deactivate'"
	@echo "Then just type: d"

# TRAINING TARGETS "tr"

tr train train-sdn: ## Train the default model (a small SimpleDenseNet) 
	time python src/train.py

trm train-mps train-sdn-mps: ## Train the default model using MPS on a Mac
	time python src/train.py trainer.accelerator=mps

trc trcnn train-cnn: ## Train with CNN architecture
	time python src/train.py model=mnist_cnn_small

trcm train-cnn-mps: ## Train CNN with MPS on Mac
	time python src/train.py model=mnist_cnn_small trainer.accelerator=mps

tram train-all-mps: ## Train all (original 68k-ish sized) architectures with MPS on Mac
	time python src/train.py model=mnist_sdn_small trainer.accelerator=mps
	time python src/train.py model=mnist_cnn trainer.accelerator=mps
	time python src/train.py model=mnist_efficientnet trainer.accelerator=mps

trtm train-tiny-mps: ## Train all Tiny architectures with MPS on Mac
	time python src/train.py model=mnist_sdn_tiny trainer.accelerator=mps
	time python src/train.py model=mnist_cnn_tiny trainer.accelerator=mps
	time python src/train.py model=mnist_efficientnet_tiny trainer.accelerator=mps

trsm train-small-mps: ## Train all Small architectures with MPS on Mac
	time python src/train.py model=mnist_sdn_small trainer.accelerator=mps
	time python src/train.py model=mnist_cnn_small trainer.accelerator=mps
	time python src/train.py model=mnist_efficientnet_small trainer.accelerator=mps

trnm train-nine-mps: tram trsm trtm ## Train Nine cases using MPS on Mac: three architectures and three sizes

# TRAIN-QUICKLY TARGETS "tq"

tq train-quick: ## Train quickly SimpleDenseNet, 1 epoch
	python src/train.py trainer.max_epochs=1 +trainer.limit_train_batches=10 +trainer.limit_val_batches=5

tqc train-quick-cnn: ## Train quickly SimpleCNN, 1 epoch
	python src/train.py model=mnist_cnn trainer.max_epochs=1 +trainer.limit_train_batches=10 +trainer.limit_val_batches=5

tqa train-quick-all: tq tcq ## Train quickly all architectures supported

# TESTING TARGETS "t"

t test: ## Run fast pytest tests
	pytest -k "not slow"

ta test-all: ## Run all pytest tests
	pytest

ca compare-arch: ## Compare architectures on quick runs
	@echo "=== Training SimpleDenseNet ==="
	python src/train.py trainer.max_epochs=3 tags="[arch_comparison,dense]"
	@echo "=== Training SimpleCNN ==="
	python src/train.py model=mnist_cnn trainer.max_epochs=3 tags="[arch_comparison,cnn]"
	@echo "=== Check logs/ directory for results comparison ==="

te train-example: ## Run example experiment config (reproducible baseline)
	time python src/train.py experiment=example

tmhe train-multihead-example: ## Run example experiment config for multihead classification
	time python src/train.py experiment=multihead_mnist
