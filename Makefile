h help:  ## Show help
	@grep -E '^[.a-zA-Z0-9_ -]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

c clean: ## Clean autogenerated files
	rm -rf dist
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	rm -f .coverage

cl clean-logs: ## Clean logs
	rm -rf logs/**

f format: ## Run pre-commit hooks
	pre-commit run -a

s sync: ## Merge changes from main branch to your current branch
	git pull
	git pull origin main

a activate: ## Activate the uv environment
	@echo "Add to ~/.tcshrc: alias a 'echo \"source .venv/bin/activate.csh\" && source .venv/bin/activate.csh'"
	@echo "Then just type: a"

d deactivate: ## Deactivate the uv environment
	@echo "Add to ~/.tcshrc: alias d 'echo deactivate && deactivate'"
	@echo "Then just type: d"

# TRAINING TARGETS "tr"

tr train train-sdn: ## Train the default model (a small SimpleDenseNet) 
	time python src/train.py


trc trcnn train-cnn: ## Train with CNN architecture
	time python src/train.py model=mnist_cnn_small

trvs train-vit-small: ## Train small ViT (~38K params)
	time python src/train.py model=mnist_vit_38k

trvm train-vit-medium: ## Train with ViT architecture (~210K params)
	time python src/train.py model=mnist_vit_210k

trvl train-vit-large: ## Train large ViT (~821K params)
	time python src/train.py model=mnist_vit_821k


trvp train-vit-pytorch: ## Train ViT using PyTorch layers
	time python src/train.py model=mnist_vit_pytorch

trcns train-convnext-small: ## Train ConvNeXt-V2 small (~68K params)
	time python src/train.py model=mnist_convnext_68k

trcnm train-convnext-medium: ## Train ConvNeXt-V2 medium (~210K params)
	time python src/train.py model=mnist_convnext_210k

trcnl train-convnext-large: ## Train ConvNeXt-V2 large (~821K params)
	time python src/train.py model=mnist_convnext_821k



# TRAIN-QUICKLY TARGETS "tq"

tq train-quick: ## Train quickly SimpleDenseNet, 1 epoch
	python src/train.py trainer.max_epochs=1 +trainer.limit_train_batches=10 +trainer.limit_val_batches=5

tqc train-quick-cnn: ## Train quickly SimpleCNN, 1 epoch
	python src/train.py model=mnist_cnn trainer.max_epochs=1 +trainer.limit_train_batches=10 +trainer.limit_val_batches=5

tqv train-quick-vit: ## Train quickly ViT, 1 epoch
	python src/train.py model=mnist_vit_38k trainer.max_epochs=1 +trainer.limit_train_batches=10 +trainer.limit_val_batches=5

tqcn train-quick-convnext: ## Train quickly ConvNeXt-V2, 1 epoch
	python src/train.py model=mnist_convnext_68k trainer.max_epochs=1 +trainer.limit_train_batches=10 +trainer.limit_val_batches=5

tqa train-quick-all: tq tqc tqv tqcn ## Train quickly all architectures supported

# TESTING TARGETS "t"

t test: ## Run fast pytest tests
	pytest -k "not slow"

ta test-all: ## Run all pytest tests
	pytest

td test-diagram: ## Generate model architecture diagrams (text + graphical)
	python viz/enhanced_model_diagrams.py

tda test-diagram-all: ## Generate diagrams for all model architectures
	python viz/enhanced_model_diagrams.py -c mnist_cnn_8k
	python viz/enhanced_model_diagrams.py -c mnist_vit_38k
	python viz/enhanced_model_diagrams.py -c mnist_convnext_68k
	python viz/enhanced_model_diagrams.py -c mnist_sdn_8k

tdl test-diagram-list: ## List available model configs for diagrams
	python viz/enhanced_model_diagrams.py --list-configs

tds test-diagram-simple: ## Generate simple text-only diagrams
	python viz/simple_model_diagram.py

ca compare-arch: ## Compare architectures on quick runs
	@echo "=== Training SimpleDenseNet ==="
	python src/train.py trainer.max_epochs=3 tags="[arch_comparison,dense]"
	@echo "=== Training SimpleCNN ==="
	python src/train.py model=mnist_cnn trainer.max_epochs=3 tags="[arch_comparison,cnn]"
	@echo "=== Training ViT ==="
	python src/train.py model=mnist_vit_38k trainer.max_epochs=3 tags="[arch_comparison,vit]"
	@echo "=== Training ConvNeXt-V2 ==="
	python src/train.py model=mnist_convnext_68k trainer.max_epochs=3 tags="[arch_comparison,convnext]"
	@echo "=== Check logs/ directory for results comparison ==="

# EXPERIMENTS "e" - Reproducible Configuration Examples

e esdn exp-sdn: ## Run original example experiment (reproducible baseline)
	time python src/train.py experiment=example

evit exp-vit: ## Run ViT experiment
	time python src/train.py experiment=vit_mnist


ev995 exp-vit-995: ## Run ViT experiment achieving SOTA 99.5% validation accuracy
	time python src/train.py experiment=mnist_vit_995
	# == python src/train.py model=mnist_vit_995 data=mnist_vit_995 trainer.max_epochs=200 trainer.min_epochs=10 trainer.gradient_clip_val=1.0 data.batch_size=128 seed=12345 tags="[mnist,vit,995,optimized]"

emhc exp-multihead-cnn: ## Run MultiHead CNN classification experiment
	time python src/train.py experiment=multihead_cnn_mnist

excn exp-convnext: ## Run ConvNeXt-V2 experiment
	time python src/train.py experiment=convnext_mnist

ecnb exp-convnext-benchmark: ## Run official ConvNeXt V2-Tiny benchmark (acid test)
	time python src/train.py experiment=convnext_v2_official_tiny_benchmark

# CIFAR BENCHMARKS "cb" - Computer Vision Dataset Experiments

cb10c cifar10-cnn: ## Run CIFAR-10 CNN benchmark (85-92% expected accuracy)
	time python src/train.py experiment=cifar10_benchmark_cnn

cb10cn cifar10-convnext: ## Run CIFAR-10 ConvNeXt benchmark (90-95% expected accuracy)
	time python src/train.py experiment=cifar10_benchmark_convnext

cb10v cifar10-vit: ## Run CIFAR-10 Vision Transformer benchmark (88-93% expected accuracy)
	time python src/train.py experiment=cifar10_benchmark_vit

cb10e cifar10-efficientnet: ## Run CIFAR-10 EfficientNet benchmark (89-94% expected accuracy)
	time python src/train.py experiment=cifar10_benchmark_efficientnet

cb100c cifar100-cnn: ## Run CIFAR-100 CNN benchmark (55-70% expected accuracy)
	time python src/train.py experiment=cifar100_benchmark_cnn

cb100cn cifar100-convnext: ## Run CIFAR-100 ConvNeXt benchmark (70-80% expected accuracy)
	time python src/train.py experiment=cifar100_benchmark_convnext

cb100v cifar100-vit: ## Run CIFAR-100 Vision Transformer benchmark (65-75% expected accuracy)
	time python src/train.py experiment=cifar100_vit_210k

cb100e cifar100-efficientnet: ## Run CIFAR-100 EfficientNet benchmark (68-78% expected accuracy)
	time python src/train.py experiment=cifar100_efficientnet_210k

cb100cc cifar100-coarse-cnn: ## Run CIFAR-100 coarse (20-class) CNN benchmark (75-85% expected accuracy)
	time python src/train.py experiment=cifar100_coarse_cnn

cb100ccn cifar100-coarse-convnext: ## Run CIFAR-100 coarse ConvNeXt benchmark (80-90% expected accuracy)
	time python src/train.py experiment=cifar100_coarse_convnext

# CIFAR QUICK BENCHMARKS "cbq" - Fast Validation Runs

cbq10c cifar10-quick-cnn: ## Quick CIFAR-10 CNN validation (5 epochs)
	python src/train.py experiment=cifar10_benchmark_cnn trainer.max_epochs=5

cbq10cn cifar10-quick-convnext: ## Quick CIFAR-10 ConvNeXt validation (5 epochs)
	python src/train.py experiment=cifar10_benchmark_convnext trainer.max_epochs=5

cbq100c cifar100-quick-cnn: ## Quick CIFAR-100 CNN validation (5 epochs)
	python src/train.py experiment=cifar100_benchmark_cnn trainer.max_epochs=5

cbq100cc cifar100-quick-coarse: ## Quick CIFAR-100 coarse validation (5 epochs)
	python src/train.py experiment=cifar100_coarse_cnn trainer.max_epochs=5

cbqa cifar-quick-all: cbq10c cbq10cn cbq100c cbq100cc ## Run all quick CIFAR validations

# CIFAR BENCHMARK SUITES "cbs" - Systematic Comparisons

cbs benchmark-suite: ## Run automated CIFAR benchmark suite
	python benchmarks/scripts/benchmark_cifar.py

cbs10 benchmark-cifar10: cb10c cb10cn cb10v cb10e ## Run all CIFAR-10 benchmarks
	@echo "=== CIFAR-10 benchmark suite complete ==="

cbs100 benchmark-cifar100: cb100c cb100cn cb100v cb100e cb100cc cb100ccn ## Run all CIFAR-100 benchmarks
	@echo "=== CIFAR-100 benchmark suite complete ==="

cbsa benchmark-all: cbs10 cbs100 ## Run complete CIFAR benchmark suite
	@echo "=== Complete CIFAR benchmark suite finished ==="

